/*
 * generated by Xtext 2.14.0
 */
package internship.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import internship.moda.fig1.NamedElement
import org.eclipse.emf.ecore.EObject

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MODAGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		var result = ""
//		for(NamedElement named : resource.allContents.toIterable.filter(NamedElement)) {
//			result += named.name + "\n"
//		}
//		fsa.generateFile("names.txt", result)
		//fsa.generateFile('names.txt', resource.allContents.filter(NamedElement).map[name + " | " + class.interfaces.get(0).name].join('\n'))
		fsa.generateFile("description.md", resource.allContents
			.toIterable
			.filter(NamedElement)
			.map[mapModaToString]
			.join("\n")
		)
	}
	
	def String getClassActualName(NamedElement e) {
		val eClass = e.class.name.toCharArray
		var res = ""
		val char dot = '.'
		var i = eClass.length-1
		while(i >= 0 && !eClass.get(i).equals(dot)) {
			i--
		}
		i++
		while(i < eClass.length-4) {
			res += eClass.get(i)
			i++
		}
		res
	}
	
	def String filterObjectReference(EObject e) {
		var tmpRes = e.toString()
		val char dot = '.'
		val char at = '@'
		val char end = '('
		var atStart = 0
		var atEnd = 0
		var atDot = 0
		var i = tmpRes.length-1
		while(i >= 0 && tmpRes.charAt(i) != dot) {
			if(tmpRes.charAt(i) == at) {
				atStart = i
			}
			if(tmpRes.charAt(i) == end) {
				atEnd = i
			}
			i--
		}
		atDot = i
		val tmp2 = tmpRes.substring(atEnd-1)
		tmpRes.substring(atDot+1, atStart-4) + tmp2
	}
	
	def String mapModaToString(NamedElement o) { '''
		
		###object «o.name» of class «o.classActualName»
		**contains :** 
		«o.eContents.map["\n* " + filterObjectReference].join(",\n")» 
		
		
		**references :**
		«o.eCrossReferences.map["\n* " + filterObjectReference].join(",\n")»
		'''
	}
}
