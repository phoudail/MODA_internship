/*
 * generated by Xtext 2.14.0
 */
package internship.validation

import org.eclipse.xtext.validation.Check
import internship.moda.fig1.Analysis
import internship.moda.fig1.Fig1Package
import internship.moda.fig1.Model
import internship.moda.fig1.Data
import internship.moda.fig1.Preparation
import internship.moda.fig1.MODA
import internship.moda.fig1.ModaRelation
import internship.moda.fig1.DataPurpose
import internship.moda.fig1.Generation
import internship.moda.fig1.Enactment
import internship.moda.fig1.Deployment
import internship.moda.fig1.Generalization

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MODAValidator extends AbstractMODAValidator {

//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MODAPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	@Check
	def checkAnalysisHasProperSource(Analysis analysis) {
		if (analysis.source !== null) {
			if (!(analysis.source instanceof Data) && !(analysis.source instanceof Model && (
				(analysis.source as Model).predictiveModel || (analysis.source as Model).descriptiveModel || (analysis.source as Model).modelFitsAllRoles
			)
			)) {
				"Analysis should only have data, descriptive models or predictive models as source".error(
					Fig1Package.Literals.ANALYSIS__SOURCE)
			}
		}
	}
	
	@Check
	def checkAnalysisHasProperTarget(Analysis analysis) {
		if(!analysis.target.prescriptiveModel && !analysis.target.modelFitsAllRoles) {
			"Analysis target should be a prescriptive model".error(
				Fig1Package.Literals.ANALYSIS__TARGET)
		}
	}

	@Check
	def checkPreparationHasProperSource(Preparation preparation) {
		if (preparation.source !== null) {
			if (!(preparation.source instanceof Data) && !(preparation.source instanceof Model && (
				(preparation.source as Model).descriptiveModel || (preparation.source as Model).modelFitsAllRoles
			)
			)) {
				"Preparation should only have data or descriptive models as source".error(
					Fig1Package.Literals.PREPARATION__SOURCE)
			}
		}
	}
	
	@Check
	def checkPreparationHasProperTarget(Preparation prep) {
		if(!prep.target.predictiveModel && !prep.target.modelFitsAllRoles) {
			"Preparation target should be a predictive model".error(
				Fig1Package.Literals.PREPARATION__TARGET)
		}
	}
	
	@Check
	def checkGenerationHasProperSource(Generation gen) {
		if(!gen.source.prescriptiveModel && !gen.source.modelFitsAllRoles) {
			"Generation source should be a prescriptive model".error(
				Fig1Package.Literals.GENERATION__SOURCE)
		}
	}
	
	@Check
	def checkGenerationHasProperTarget(Generation gen) {
		if(!gen.target.prescriptiveModel && !gen.target.modelFitsAllRoles) {
			"Generation target should be a prescriptive model".error(
				Fig1Package.Literals.GENERATION__TARGET)
		}
	}
	
	@Check
	def checkEnactmentHasProperSource(Enactment enact) {
		if(!enact.source.prescriptiveModel && !enact.source.modelFitsAllRoles) {
			"Enactment source should be a prescriptive model".error(
				Fig1Package.Literals.ENACTMENT__SOURCE)
		}
	}
	
	@Check
	def checkDeploymentHasProperSource(Deployment dep) {
		if(!dep.source.prescriptiveModel && !dep.source.modelFitsAllRoles) {
			"Deployment source should be a prescriptive model".error(
				Fig1Package.Literals.DEPLOYMENT__SOURCE)
		}
	}
	
	@Check
	def checkGeneralizationHasProperTarget(Generalization gen) {
		if(!gen.target.descriptiveModel && !gen.target.modelFitsAllRoles) {
			"Generalization target should be a descriptive model".error(
				Fig1Package.Literals.GENERALIZATION__TARGET)
		}
	}

	@Check
	def checkModaRelationIsSingleton(ModaRelation modaRel) {
		if (!(modaRel instanceof DataPurpose)) {
			val moda = modaRel.eContainer as MODA
			var index = 0
			for (other : moda.relations) {
				if (modaRel != other && other.class == modaRel.class) {
					"There should not be multiple instances of a relation type".error(moda,
						Fig1Package.Literals.MODA__RELATIONS, index)
				}
				index++
			}
		}
	}

// Stop prescriptive model generation ? (G arrow)
	@Check
	def checkModelRoleIsSingleton(Model model) {
		val moda = model.eContainer as MODA
		var index = 0
		for (other : moda.model) {
			if (model != other && ((model.predictiveModel && other.predictiveModel) || (model.descriptiveModel && other.descriptiveModel))) {
				"There should not be multiple instances of a given model role".error(moda,
					Fig1Package.Literals.MODA__MODEL, index)
			}
			index++
		}
	}
	
	@Check
	def checkPrescriptiveGenerationIsntReflective(Generation gen) {
		if(gen.source == gen.target) {
			"A prescriptive model's generation should not target itself".error(
				Fig1Package.Literals.GENERATION__TARGET)
		}
	}
	
	def modelFitsAllRoles(Model model) {
		return !model.prescriptiveModel && !model.predictiveModel && !model.descriptiveModel
	}

}
