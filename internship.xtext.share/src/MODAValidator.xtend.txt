/*
 * generated by Xtext 2.14.0
 */
package internship.validation

import org.eclipse.xtext.validation.Check
import internship.moda.fig1.Analysis
import internship.moda.fig1.Fig1Package

import internship.moda.fig1.Data
import internship.moda.fig1.Preparation
import internship.moda.fig1.DescriptiveModel
import internship.moda.fig1.PredictiveModel
import internship.moda.fig1.MODA
import internship.moda.fig1.ModaRelation
import internship.moda.fig1.DataPurpose
import internship.moda.fig1.ModelRole

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MODAValidator extends AbstractMODAValidator {

//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MODAPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	@Check
	def checkAnalysisHasProperSource(Analysis analysis) {
		if (analysis.source !== null) {
			if (!(analysis.source instanceof DescriptiveModel ||
				analysis.source instanceof PredictiveModel && analysis.source instanceof Data)) {
				"Analysis should only have data, descriptive models or predictive models as source".error(
					Fig1Package.Literals.ANALYSIS__SOURCE)
			}
		}
	}

	@Check
	def checkPreparationHasProperSource(Preparation preparation) {
		if (preparation.source !== null) {
			if (!(preparation.source instanceof DescriptiveModel || preparation.source instanceof Data)) {
				"Preparation should only have data or descriptive models as source".error(
					Fig1Package.Literals.PREPARATION__SOURCE)
			}
		}
	}

	@Check
	def checkModaRelationIsUnique(ModaRelation modaRel) {
		if (!(modaRel instanceof DataPurpose)) {
			val moda = modaRel.eContainer as MODA
			var index = 0
			for (other : moda.relations) {
				if (modaRel != other && other.class == modaRel.class) {
					"There should not be multiple instances of a relation type".error(moda,
						Fig1Package.Literals.MODA__RELATIONS, index)
				}
				index++
			}
		}
	}
		

	@Check
	def checkModelRoleIsUnique(ModelRole modelRole) {
		val moda = modelRole.eContainer as MODA
		var index = 0
		for (other : moda.modelrole) {
			if (modelRole != other && other.class == modelRole.class) {
				"There should not be multiple instances of a given model role".error(moda,
					Fig1Package.Literals.MODA__MODELROLE, index)
			}
			index++
		}
	}
	

}
